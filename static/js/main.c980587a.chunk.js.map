{"version":3,"sources":["components/Image.js","components/Picsum.js","components/Title.js","components/App.js","serviceWorker.js","index.js"],"names":["Image","props","source","id","author","author_url","post_url","imageUrl","console","log","alt","src","target","href","rel","Picsum","fetchAsync","a","async","fetch","state","url","req","json","res","random","Math","floor","Object","keys","length","setState","prevState","error","handleSubmit","event","preventDefault","this","onSubmit","Component","Title","text","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qPAGe,SAASA,EAAMC,GAAQ,IAAD,EAEYA,EAAMC,OAA3CC,EAFyB,EAEzBA,GAAIC,EAFqB,EAErBA,OAAQC,EAFa,EAEbA,WAAYC,EAFC,EAEDA,SAE1BC,EAAW,uCAAyCJ,EAG1D,OADAK,QAAQC,IAAI,gBAER,oCACI,yBACIC,IAAI,iBACJC,IAAKJ,IAET,2BAAG,uBACCK,OAAO,SAEPC,KAAMR,EACNS,IAAI,uBACNV,GALF,MAMO,uBAAGQ,OAAO,SACbE,IAAI,sBACJD,KAAMP,GAFH,W,IClBES,E,YAEjB,WAAYd,GAAQ,IAAD,8BACf,4CAAMA,KAsBVe,WAAa,8BAAAC,EAAAC,OAAA,uDAETV,QAAQC,IAAI,kBAFH,oBAAAQ,EAAA,MAKaE,MAAM,EAAKC,MAAMC,MAL9B,cAKCC,EALD,kBAAAL,EAAA,MAOaK,EAAIC,QAPjB,OAOCC,EAPD,OAWCC,EAASC,KAAKC,MAChBD,KAAKD,SAAWG,OAAOC,KAAKL,GAAKM,QAGrCtB,QAAQC,MAIR,EAAKsB,UAAS,SAAAC,GAAS,MAAK,CACxBb,OAAO,EACPjB,OAAQsB,EAAIC,OArBX,kDA8BLjB,QAAQyB,MAAR,MA9BK,0DAvBM,EAyDnBC,aAAe,SAACC,GAEZA,EAAMC,iBACN5B,QAAQC,IAAI,gBACZ,EAAKO,cA3DL,EAAKI,MAAQ,CACTC,IAAK,6BACLnB,OAAQ,GACRiB,OAAO,GALI,E,iFAUfkB,KAAKrB,aACLR,QAAQC,IACJ,yB,2CAKJD,QAAQC,IACJ,yB,+BAgDJ,OADAD,QAAQC,IAAI,iBAER,6BAEK4B,KAAKjB,MAAMD,OAER,kBAACnB,EAAD,CAAOE,OAAQmC,KAAKjB,MAAMlB,SAE9B,0BAAMoC,SAAUD,KAAKH,cACjB,wD,GA5EgBK,aCFrB,SAASC,EAAMvC,GAC1B,OACI,4BAAKA,EAAMwC,MCYJC,MAXf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAACH,EAAD,CAAOC,KAAK,eACZ,kBAAC,EAAD,SCEYG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.c980587a.chunk.js","sourcesContent":["import React from 'react'\n\n// THIS IS A PURE <component/function>\nexport default function Image(props) {\n\n    const { id, author, author_url, post_url } = props.source\n\n    const imageUrl = \"https://picsum.photos/800/600?image=\" + id\n\n    console.log(\"RENDER IMAGE\")\n    return (\n        <>\n            <img\n                alt=\"This is an API\"\n                src={imageUrl}\n            />\n            <p><a\n                target=\"_blank\"\n\n                href={author_url}\n                rel=\"noopener noreferrer\"\n            >{author}\n            </a> | <a target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                href={post_url}\n\n            >Photo</a>\n            </p>\n        </>\n    )\n}\n","import React, { Component } from 'react'\n\nimport Image from './Image'\n\nexport default class Picsum extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            url: 'https://picsum.photos/list',\n            source: '',\n            fetch: false\n        }\n    }\n\n    componentDidMount() {\n        this.fetchAsync()\n        console.log(\n            \"COMPONENT DID MOUNT\"\n        )\n    }\n\n    componentDidUpdate() {\n        console.log(\n            \"COMPONENT DID Mount\"\n        )\n\n    }\n\n    fetchAsync = async () => {\n\n        console.log(\"Now fetch Data\")\n        try {\n\n            const req = await fetch(this.state.url)\n\n            const res = await req.json()\n\n\n\n            const random = Math.floor(\n                Math.random() * Object.keys(res).length\n            )\n\n            console.log(\n\n            )\n\n            this.setState(prevState => ({\n                fetch: true,\n                source: res[random]\n            }\n            )\n            )\n        }\n\n\n\n        catch (error) {\n            console.error(error)\n        }\n    }\n\n    handleSubmit = (event) => {\n        // method ot handle submit events\n        event.preventDefault();\n        console.log(\"You clicked!\")\n        this.fetchAsync()\n    }\n\n    render() {\n        console.log(\"RENDER PICSUM\")\n        return (\n            <div>\n\n                {this.state.fetch &&\n\n                    <Image source={this.state.source} />\n                }\n                <form onSubmit={this.handleSubmit}>\n                    <button>\n                        Random Picture\n                    </button>\n                </form>\n            </div>\n        )\n    }\n}\n","import React from 'react'\n\nexport default function Title(props) {\n    return (\n        <h1>{props.text}</h1>\n    )\n}","import React from 'react';\nimport '../styles/App.css';\nimport Picsum from './Picsum';\nimport Title from './Title'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Title text=\"Picsum API\" />\n        <Picsum />\n      </header>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}